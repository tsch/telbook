#!/usr/bin/perl

###############################################################################
#                                                                             #
# Telbook - A simple telephone book                                           #
# Copyright (C) 2003-2012 Torsten SchÃ¶nfeld                                   #
#                                                                             #
# This program is free software; you can redistribute it and/or modify it     #
# under the terms of the GNU General Public License as published by the Free  #
# Software Foundation; either version 2 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       #
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for   #
# more details.                                                               #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc., 59  #
# Temple Place, Suite 330, Boston, MA 02111-1307 USA                          #
#                                                                             #
###############################################################################

use strict;
use warnings;
use utf8;
use 5.10.0;

use Gtk3 0.008 -init;

my $ui = ui -> new();

$ui -> initialize();

my $HOME_DIR = $ENV{ HOME };
my $DATA_DIR = $HOME_DIR . "/.local/share/telbook";
my $DEFAULT_TELBOOK = $DATA_DIR . "/telbook";

my $OLD_DEFAULT_TELBOOK = $HOME_DIR . "/.telbook";

if (-f $OLD_DEFAULT_TELBOOK) {
  if (not -f $DEFAULT_TELBOOK) {
    warn sprintf "*** Moving old default telbook at '%s' to new location '%s'\n",
                 $OLD_DEFAULT_TELBOOK, $DEFAULT_TELBOOK;
    rename $OLD_DEFAULT_TELBOOK, $DEFAULT_TELBOOK;
  } else {
    warn sprintf "*** Both, the old default telbook at '%s' " .
                 "and the new default telbook at '%s' exist; ignoring the old one\n",
                 $OLD_DEFAULT_TELBOOK, $DEFAULT_TELBOOK
  }
}

if (-f $DEFAULT_TELBOOK) {
  $ui -> file_open($DEFAULT_TELBOOK);
}

$ui -> run();

###############################################################################

package ui;

use Glib qw/TRUE FALSE/;

use constant COLUMN_NAME => 0;
use constant COLUMN_HOME => 1;
use constant COLUMN_MOBILE => 2;
use constant COLUMN_VISIBLE => 3;

sub new {
  my ($class) = @_;
  my $self = {};

  bless($self, $class);

  $self -> changed(0);

  return $self;
}

sub changed {
  my ($self, $value) = @_;

  if (defined($value)) {
    if ($value == 1 && $self -> { _changed } != 1) {
      $self -> { main_window } -> set_title($self -> { main_window } -> get_title() . " (*)");
    }

    $self -> { _changed } = $value;
  }

  return $self -> { _changed };
}

sub create_edit_frame {
  my ($self) = @_;

  my $edit_button_hbox = Gtk3::HBox -> new(0, 0);

  my $button_add = Gtk3::Button -> new("_Add");
  my $button_remove = Gtk3::Button -> new("_Remove");
  $button_remove -> set_sensitive(Glib::FALSE);

  $button_add -> signal_connect(clicked => sub {
    my $model = $self -> { main_model };
    my $iterator = $model -> append();
    $model -> set($iterator, COLUMN_VISIBLE, Glib::TRUE);
    $self -> changed(1);

    my $view = $self -> { main_view };
    my $view_model = $view -> get_model();
    my $view_iterator = _model_iter_to_view_iter($view, $model, $iterator);
    $view -> set_cursor($view_model -> get_path($view_iterator),
                        $view -> get_column(COLUMN_NAME),
                        Glib::TRUE);

    return 1;
  });

  $button_remove -> signal_connect(clicked => sub {
   my $view = $self -> { main_view };
   my ($model, $iterator) = $view -> get_selection() -> get_selected();

   if (defined($model) && defined($iterator)) {
     my $main_model = $self -> { main_model };
     my $main_iterator = _view_iter_to_model_iter($view, $main_model, $iterator);
     $main_model -> remove($main_iterator);
     $self -> changed(1);
   }

   return 1;
  });

  $edit_button_hbox -> pack_start($button_add, 1, 1, 0);
  $edit_button_hbox -> pack_start($button_remove, 1, 1, 0);

  $self -> { edit_button_add } = $button_add;
  $self -> { edit_button_remove } = $button_remove;

  return $edit_button_hbox;
}

sub create_menu {
  my ($self) = @_;

  my $menu_ui = <<__UI__;
<ui>
  <menubar action="menubar">
    <menu action="file">
      <menuitem action="open"/>
      <separator/>
      <menuitem action="save"/>
      <menuitem action="save_as"/>
      <separator/>
      <menuitem action="quit"/>
    </menu>
    <menu action="help">
      <menuitem action="manual"/>
      <menuitem action="about"/>
    </menu>
  </menubar>
</ui>
__UI__

  my @menu_actions = (
    {
      name     => 'file',
      stock_id => 'gtk-file',
    },
    {
      name     => 'open',
      stock_id => 'gtk-open',
      callback => sub { $self -> file_open(); },
    },
    {
      name     => 'save',
      stock_id => 'gtk-save',
      callback => sub { $self -> file_save(); },
    },
    {
      name     => 'save_as',
      stock_id => 'gtk-save-as',
      callback => sub { $self -> file_save_as(); },
    },
    {
      name     => 'quit',
      stock_id => 'gtk-quit',
      callback => sub { $self -> quit(); },
    },
    {
      name     => 'help',
      stock_id => 'gtk-help',
    },
    {
      name => 'manual',
      stock_id => 'gtk-help',
      accelerator => 'F1',
      callback => sub { $self -> manual(); },
    },
    {
      name => 'about',
      stock_id => 'gtk-about',
      accelerator => 'F4',
      callback => sub { $self -> about(); },
    },
  );

  my $action_group = Gtk3::ActionGroup -> new('TelbookActionGroup');
  $action_group -> add_actions(\@menu_actions);

  my $ui_manager = Gtk3::UIManager -> new();
  $ui_manager -> insert_action_group($action_group, 0);
  $ui_manager -> add_ui_from_string($menu_ui);

  my $accel_group = $ui_manager -> get_accel_group();
  $self -> { main_window } -> add_accel_group($accel_group);

  return $ui_manager -> get_widget("/menubar");
}

sub create_filter_frame {
  my ($self) = @_;

  my $filter_hbox = Gtk3::HBox -> new(0, 5);
  $filter_hbox -> set_border_width(5);

  my $filter_entry = Gtk3::Entry -> new();
  $filter_entry -> signal_connect(changed => sub {
    return $self -> filter_rows();
  });

  my $filter_label = Gtk3::Label -> new_with_mnemonic('_Filter:');
  $filter_label -> set_mnemonic_widget($filter_entry);

  $filter_hbox -> pack_start($filter_label, 0, 0, 0);
  $filter_hbox -> pack_start($filter_entry, 1, 1, 0);

  $self -> { filter_entry } = $filter_entry;

  return $filter_hbox;
}

sub _view_iter_to_model_iter {
  my ($view, $model, $iterator) = @_;
  my $child_model = $view -> get_model();
  my $child_iterator = $iterator;
  while ($child_model != $model) {
    $child_iterator = $child_model -> convert_iter_to_child_iter($child_iterator);
    $child_model = $child_model -> get_model();
  }
  return $child_iterator;
}

sub _model_iter_to_view_iter {
  my ($view, $model, $iterator) = @_;

  my @models_in_between;
  my $child_model = $view -> get_model();
  while ($child_model != $model) {
    push @models_in_between, $child_model;
    $child_model = $child_model -> get_model();
  }

  my $parent_iterator = $iterator;
  foreach my $model_in_between (reverse @models_in_between) {
    $parent_iterator = $model_in_between -> convert_child_iter_to_iter($parent_iterator);
  }
  return $parent_iterator;
}

sub create_main_list_container {
  my ($self) = @_;

  my $container = Gtk3::ScrolledWindow -> new();
  my $model = Gtk3::ListStore -> new(qw(Glib::String Glib::String Glib::String
                                        Glib::Boolean));
  my $filtered_model = Gtk3::TreeModelFilter -> new($model, undef);
  $filtered_model -> set_visible_column(COLUMN_VISIBLE);
  my $sorted_model = Gtk3::TreeModelSort -> new_with_model($filtered_model);
  my $view = Gtk3::TreeView -> new($sorted_model);

  foreach ([COLUMN_NAME, "Name", 240],
           [COLUMN_HOME, "Home", 100],
           [COLUMN_MOBILE, "Mobile", 100]) {
    my ($column, $title, $width) = @{$_};

    my $cell_renderer = Gtk3::CellRendererText -> new();
    $cell_renderer -> set(editable => Glib::TRUE);
    $cell_renderer -> signal_connect(edited => sub {
      my ($cell_renderer, $path, $new) = @_;
      my $view_model = $view -> get_model();
      my $view_iterator = $view_model -> get_iter_from_string($path);
      my $iterator = _view_iter_to_model_iter($view, $model, $view_iterator);
      my $old = $model -> get($iterator, $column) // "";
      if ($new ne $old) {
        $self -> changed(1);
        $model -> set($iterator, $column => $new);
        # The sorting might move this row out of view, so scroll there
        # manually.
        my $view_iterator = _model_iter_to_view_iter($view, $model, $iterator);
        $view -> set_cursor($view_model -> get_path($view_iterator), undef, Glib::FALSE);
      }
    });

    my $view_column =
      Gtk3::TreeViewColumn -> new_with_attributes($title,
                                                  $cell_renderer,
                                                  text => $column);
    $view_column -> set_min_width($width);
    $view_column -> set_sort_column_id($column);

    $view -> append_column($view_column);
  }

  $model -> set_sort_column_id(COLUMN_NAME, "ascending");

  $view -> set_rules_hint(1);
  $view -> get_selection() -> set_mode("single");

  $view -> get_selection() -> signal_connect(changed => sub {
    my ($selection) = @_;
    my ($model, $iterator) = $selection -> get_selected();

    my $have_selection = defined($model) && defined($iterator);
    $self -> { edit_button_remove } -> set_sensitive ($have_selection);

    return 1;
  });

  $view -> signal_connect(key_press_event => sub {
    my ($view, $event) = @_;

    if ($event -> keyval == Gtk3::Gdk::KEY_Delete) {
      my $iterator = $view -> get_selection() -> get_selected();

      if (defined($iterator)) {
        my $child_iterator = _view_iter_to_model_iter($view, $model, $iterator);
        $model -> remove($child_iterator);
        $self -> changed(1);
      }

      return 1;
    }

    return 0;
  });

  $container -> add($view);
  $container -> set_policy("automatic", "automatic");

  $self -> { main_model } = $model;
  $self -> { main_filtered_model } = $filtered_model;
  $self -> { main_view } = $view;

  return $container;
}

sub create_main_window {
  my ($self) = @_;

  my $main_window = $self -> { main_window } = Gtk3::Window -> new("toplevel");
  my $main_vbox = Gtk3::VBox -> new(0, 5);

  $main_window -> set_title("Telephone Book");
  $main_window -> set_default_size(500, 600);
  $main_window -> set_border_width(5);

  $main_window -> signal_connect(delete_event => sub {
    return $self -> quit();
  });

  $main_vbox -> pack_start($self -> create_menu(), 0, 0, 0);
  $main_vbox -> pack_start($self -> create_filter_frame(), 0, 0, 0);
  $main_vbox -> pack_start($self -> create_main_list_container(), 1, 1, 0);
  $main_vbox -> pack_start($self -> create_edit_frame(), 0, 0, 0);

  $self -> { filter_entry } -> grab_focus();

  $main_window -> add($main_vbox);
  $main_window -> show_all();

  return 1;
}

sub error {
  my ($self, $label) = @_;

  my $dialog = Gtk3::MessageDialog -> new($self -> { main_window },
                                          [qw(modal destroy_with_parent)],
                                          "error",
                                          "close",
                                          $label);

  $dialog -> run();
  $dialog -> destroy();

  return 0;
}

sub file {
  my ($self, $file) = @_;

  if (defined($file)) {
    $self -> { _file } = $file;
  }

  return $self -> { _file };
}

sub initialize {
  my ($self) = @_;

  $self -> create_main_window();

  return 1;
}

sub filter_rows {
  my ($self) = @_;

  my $filter_text = $self -> { filter_entry } -> get_text();
  $self -> { edit_button_add } -> set_sensitive ($filter_text eq "");

  $self -> { main_model } -> foreach(sub {
    my ($model, $path, $iterator) = @_;
    my ($value_name,
        $value_home,
        $value_mobile) = ($model -> get($iterator, COLUMN_NAME),
                          $model -> get($iterator, COLUMN_HOME),
                          $model -> get($iterator, COLUMN_MOBILE));

    my $matches = Glib::TRUE;
    if ($filter_text ne "") {
      $matches = index(lc($value_name), lc($filter_text)) > -1 ||
                 index($value_home, $filter_text) > -1 ||
                 index($value_mobile, $filter_text) > -1;
    }
    $model -> set($iterator, COLUMN_VISIBLE, $matches);

    return 0;
  });

  return 1;
}

sub file_dialog {
  my ($self, $action) = @_;
  my $file;

  my $file_chooser = Gtk3::FileChooserDialog -> new(
    (($action eq "save") ?
      "Select a file for saving" :
      "Select the file to open"),
    $self -> { main_window },
   $action,
   "Cancel" => "cancel",
   "OK" => "ok");

  my $response = $file_chooser -> run();
  if ($response eq "ok") {
    $file = $file_chooser -> get_filename();
  }
  $file_chooser -> destroy();

  return $file;
}

sub file_open {
  my ($self, $file) = @_;

  unless (defined($file)) {
    $file = $self -> file_dialog("open");
  }

  if (defined($file)) {
    $self -> changed(0);
    $self -> file($file);
    $self -> { main_window } -> set_title("Telephone Book - $file");

    if (defined($self -> { main_model } -> get_iter_first())) {
      if ($self -> question("Do you want to clear the list before inserting the new entries?")) {
        $self -> { main_model } -> clear();
      }
      else {
        $self -> changed(1);
      }
    }

    open(FILE, $file) or return $self -> error("Error opening $file: $!");

    while (<FILE>) {
      chomp();

      my ($name, $home, $mobile) = split(/\t/);

      if (defined($name) && $name ne "") {
        $self -> { main_model } -> set(
          $self -> { main_model } -> append(),
          COLUMN_NAME, $name,
          COLUMN_HOME, $home // "",
          COLUMN_MOBILE, $mobile // "",
          COLUMN_VISIBLE, Glib::TRUE);
      }
    }

    close(FILE);
  }

  return 1;
}

sub file_save {
  my ($self, $file) = @_;

  unless (defined($file)) {
    $file = $self -> file();
  }

  if (defined($file)) {
    open(FILE, ">" . $file) or return $self -> error("Error opening $file: $!");

    $self -> { main_model } -> foreach(sub {
      my ($model, $path, $iterator) = @_;

      my $line = join("\t", ($model -> get($iterator, COLUMN_NAME),
                             $model -> get($iterator, COLUMN_HOME) // "",
                             $model -> get($iterator, COLUMN_MOBILE) // ""));
      print FILE $line, "\n";

      return 0;
    });

    close(FILE);

    $self -> changed(0);
    $self -> file($file);
    $self -> { main_window } -> set_title("Telephone Book - $file");
  }
  else {
    $self -> error("No file specified.");
  }

  return 1;
}

sub file_save_as {
  my ($self) = @_;
  my $file = $self -> file_dialog("save");

  $self -> file_save($file) if (defined($file));

  return 1;
}

sub question {
  my ($self, $label) = @_;

  my $dialog = Gtk3::MessageDialog -> new($self -> { main_window },
                                          [qw(modal destroy_with_parent)],
                                          "question",
                                          "yes_no",
                                          $label);

  my $response = $dialog -> run();
  $dialog -> destroy();

  return $response eq "yes";
}

sub quit {
  my ($self) = @_;

  if ($self -> changed() == 1) {
    my $dialog = Gtk3::MessageDialog -> new($self -> { main_window },
                                            "modal",
                                            "question",
                                            "none",
                                            "Save changes before exiting?");

    $dialog -> add_buttons("_Exit without Saving" => 0,
                           "gtk-cancel" => 1,
                           "gtk-save" => 2);

    my $response = $dialog -> run();
    $dialog -> destroy();

    if ($response eq "delete-event" || $response == 1) {
      return;
    }
    elsif ($response == 0) {
      Gtk3 -> main_quit();
      return 1;
    }
    elsif ($response == 2) {
      $self -> file_save() && Gtk3 -> main_quit();
      return 1;
    }
  }
  else {
    Gtk3 -> main_quit();
    return 1;
  }

  return 1;
}

sub manual {
  my ($self) = @_;

  my $dialog = Gtk3::Dialog -> new_with_buttons("Telbook Manual",
                                                undef,
                                                qw/destroy-with-parent/,
                                                'gtk-ok' => 'accept');
  $dialog -> signal_connect(response => sub { $dialog -> destroy(); });

  my $text_view = Gtk3::TextView -> new();
  $text_view -> get_buffer() -> set_text(<<'__EOM__');
__MANUAL__
__EOM__
  $text_view -> modify_font(Pango::FontDescription::from_string("Mono"));

  my $scroller = Gtk3::ScrolledWindow -> new();
  $scroller -> add($text_view);
  $scroller -> set_policy('never', 'automatic');

  $dialog -> get_content_area() -> pack_start($scroller, TRUE, TRUE, 0);
  $dialog -> set_default_size(400, 800);
  $dialog -> show_all();
}

sub about {
  my ($self) = @_;
  Gtk3 -> show_about_dialog(
    $self -> { main_window },
    program_name   => 'Telbook',
    version        => '0.4',
    logo_icon_name => 'vcard',
    authors        => 'Torsten SchÃ¶nfeld',
    documenters    => 'Torsten SchÃ¶nfeld',
    comments       => 'A simple personal telephone book',
    copyright      => "Copyright (C) 2003-2014 Torsten SchÃ¶nfeld",
    license_type   => 'gpl-2-0',
  );
}


sub run {
  my ($self) = @_;

  Gtk3 -> main();

  return 1;
}

sub valid {
  my ($self, @values) = @_;

  foreach (@values) {
    return 0 if (m/\t/);
  }

  return 1;
}
